@page "/AddUser"
@using COSLApplications.Shared.Models
@using COSLApplications.Shared.Validations

@using System.Net.Http
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using System.Text.Json

<h2>Add User</h2>
<EditForm Model="@user" OnValidSubmit="@HandleValidSubmit">
	<DataAnnotationsValidator />

	<ValidationSummary />
	<div class="row">
		<div class="col-md-6">
			<div class="form-group">
				<label for="UserID"> User ID*</label>
				<label for="active">( Active</label><input type="checkbox" form="active" @bind="@user.IsActive" /><label>)</label>
				<input form="UserID" class="form-control" @bind="@user.UserID" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label for="FirstName"> First Name *</label>
				<input form="FirstName" class="form-control" @bind="@user.FirstName" />
				<ValidationMessage For="@(() => user.FirstName)" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label for="LastName"> Last Name *</label>
				<input form="LastName" class="form-control" @bind="@user.LastName" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label for="Email"> Email *</label>
				<input form="Email" class="form-control" @bind="@user.Email" /><ValidationMessage For="@(() => user.Email)" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label for="PhoneNumber"> Phone # *</label>
				<input form="PhoneNumber" class="form-control" @bind="@user.PhoneNumber" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label for="Company"> Company # *</label>
				<input form="company" class="form-control" @bind="@user.Company" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label for="address"> Address # *</label>
				<input form="address" class="form-control" @bind="@user.Address" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label for="City"> City *</label>
				<input form="City" class="form-control" @bind="@user.City" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label for="Region"> Region *</label>
				<input form="Region" class="form-control" @bind="@user.Region" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label for="Department"> Department *</label>
				<input form="Department" class="form-control" @bind="@user.Department" />
			</div>
		</div>
		@*<div class="col-md-6">
		<div class="form-group">
		<CustomLabel TItem="UserModel" aspfor="@nameof(UserModel.CreatedDate)"></CustomLabel>
		<input type="datetime-local" form="date" class="form-control" @bind="@user.CreatedDate" />
		</div>
		</div>*@
		<div class="col-md-6">
			<div class="form-group">
				<label for="position"> Position *</label>
				<input form="position" class="form-control" @bind="@user.Position" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label for="group"> IT Group *</label>
				<input type="itgroup" form="date" class="form-control" @bind="@user.ItGroup" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label for="office"> Office Location *</label>
				<input form="office" class="form-control" @bind="@user.OfficePosition" />
			</div>
		</div>


	</div>
	<div class="row">
		<div class="col-md-4">
			<div class="form-group">
				@*<input type="button" class="btn btn-primary" @onclick="@Save" value="Save" />*@
				<button type="submit">Save</button>
				<input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
			</div>
		</div>
	</div>
</EditForm>

@code {
	UserModel user = new();
	protected override async Task OnInitializedAsync()
	{
		user.Company = "CCL";
		user.CreatedDate = DateTime.Now;
		user.ItGroup = -1;
		user.OfficePosition = "Calgary";
		user.IsActive = true;
		string result = await Http.GetStringAsync("api/user/maxUserID");

		//HttpResponseMessage aa = await Http.GetAsync("api/user/maxUserID");
		//var result = await aa.Content.ReadAsStringAsync();
		//var result = aa.Content.ReadAsStringAsync().Result;
		user.UserID = 1 + Convert.ToInt32(result);
	}
	protected async Task Save()
	{
		var response = await Http.PostAsJsonAsync("api/User", @user);
		UserModel personResponse = await response.Content.ReadFromJsonAsync<UserModel>();
		if (personResponse?.Id is not null)
		{
			await JsRuntime.InvokeVoidAsync("alert", "Saved Successfully!");
			NavigationManager.NavigateTo("ListUsers");
		}
	}
	void Cancel()
	{
		NavigationManager.NavigateTo("ListUsers");
	}
	private async void HandleValidSubmit()
	{
		if (await check())
		{
			JsRuntime.InvokeVoidAsync("alert", "the email is exist");
			return;
		}
		await Save();
		//var modelJson = JsonSerializer.Serialize(user, new JsonSerializerOptions { WriteIndented = true });
		//JsRuntime.InvokeVoidAsync("alert", $"SUCCESS!! :-)\n\n{modelJson}");
	}
	private async Task<bool> check()
	{

		ValidCheckClass vc = new();
		vc.command = "unique";
		vc.dataType = "string";
		vc.dataValue = "q";
		vc.result = "";
		vc.fieldName = "Email";

		var response = await Http.PostAsJsonAsync<ValidCheckClass>("api/User/check", vc);
		var res = await response.Content.ReadFromJsonAsync<ValidCheckClass>();
		if (res.result == "yes")
			return true;
		else
			return false;
	}
}
